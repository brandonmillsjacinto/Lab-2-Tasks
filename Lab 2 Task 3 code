/* Filename: Lab 2 Task 3.cpp
Author: Brandon Mills Jacinto
Date: 06/02/2025
*/
#include "mbed.h" // I used the Mbed Library for Hardware control.
#include "arm_book_lib.h" // I used the arm book library to use additional functions (i.e. ON, OFF, LED control etc.).

#define BLINKING_INTERVAL 200ms // This line defines the blinking rate for the LED when it flashes (200 milliseconds per flash).

int main()
{
    DigitalIn gasDetector(D2); // This defines a digital input for the gas detector sensor at pin D2.
    DigitalIn overTempDetector(D3); // This defines a digital input for the over-temperature sensor at pin D3.

    // Lines 16-20 is setting up the input pins for the gas and temperature sensors and buttons that I need to use in the program
    DigitalIn enterButton(BUTTON1); // The enter button is mapped to BUTTON 1 (or B1 on the board) that is used to confirm any actions or reset the alarm.
    DigitalIn aButton(D7); // Button A is located on Pin D7 and is the first digit of the 4-digit code.
    DigitalIn bButton(D6); // Button B is located on Pin D6 and is the second digit of the 4-digit code.
    DigitalIn cButton(D5); // Button C is located on Pin D5 and is the third digit of the 4-digit code.
    DigitalIn dButton(D4); // Button D is located on Pin D4 and is the fourth digit of the 4-digit code.

    DigitalOut alarmLed(LED1); // LED1 on the NUCLEO board represents whether the alarm is ON or OFF.

    gasDetector.mode(PullDown); // This sets the gas detector pin to pull-down mode so it starts at LOW by default when not in use.
    overTempDetector.mode(PullDown); // This sets the over temperature pin to pull-down mode so it starts at LOW by default when not in use.
    aButton.mode(PullDown); // This sets the a button pin to pull-down mode so it starts at LOW by default when not in use.
    bButton.mode(PullDown); // This sets the b button pin to pull-down mode so it starts at LOW by default when not in use.
    cButton.mode(PullDown); // This sets the c button pin to pull-down mode so it starts at LOW by default when not in use.
    dButton.mode(PullDown); // This sets the d button pin to pull-down mode so it starts at LOW by default when not in use.

    alarmLed = OFF; // The line indicates that the alarm LED starts as OFF as the system is initially in a safe state.

    bool alarmState = OFF; // Bool variable to keep track of whether the alarm is on (true) or off (false).
    bool flashingMode = false; // Bool variable to keep track of whether the alarm be flshing

    while (true) { // Loop to keep checking to see if gas or high temperature triggers the alarm.
        if (gasDetector || overTempDetector) { // If either the gas dectector OR (||) the over-temperature detector detects a problem (i.e. one of them is pressed pressed)...
            alarmState = ON; // Then LED1 will turn on.
        }
        if (gasDetector && overTempDetector) { // If the gas detector AND (&&) the over-temperature detector detects a problem (i.e. both pressed simultaneously)...
            flashingMode = true; // Then LED1 will start flashing.
        }

        if (flashingMode) { // If LED1 is flashing...
            alarmLed = !alarmLed; // Then toggle the alarm LED state...
            ThisThread::sleep_for(BLINKING_INTERVAL); // Wait for the defined blinking interval.
        } else if (alarmState == ON) { // Else if the alarm state is ON but not in flashing mode, then the LED is turned on continuously.
            alarmLed = ON; // Keep the LED ON if the alarm is active.
        } else { // Else if the alarm is not active...
            alarmLed = OFF; // Then keep the LED OFF
        }
        if (aButton && bButton && cButton && dButton && enterButton) { // If all buttons are pressed, then the alarm system resets.
            alarmState = OFF; // This line turns the alarm off.
            flashingMode = false; // This line disables the flashing mode.
            alarmLed = OFF; // This line turns off the LED.
        }
    }
}
